name: Deploy Backend (Lambda)

on:
  push:
    branches: [main, dev]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      CONFIG_ENV: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Debug files
        working-directory: backend
        run: |
          node -v
          npm -v
          pwd
          ls -la
          head -n 20 package.json
          head -n 40 package-lock.json

      - name: Install backend deps
        working-directory: backend
        env:
          NODE_ENV: "" # ensure dev deps aren't implicitly omitted by env
        run: |
          npm install --omit=dev --no-audit --no-fund

      - name: SAM build
        working-directory: backend
        run: sam build --cached

      - name: Who am I / region
        run: |
          set -e
          aws sts get-caller-identity
          aws configure list

      - name: SAM build (no container)
        working-directory: backend
        run: sam build --cached

      - name: SAM deploy (explicit bucket + debug + wait)
        working-directory: backend
        env:
          STACK_NAME: med-arb-api-${{ env.CONFIG_ENV }}
          ARTIFACT_BUCKET: ${{ secrets[format('SAM_ARTIFACT_BUCKET_{0}', env.CONFIG_ENV == 'prod' && 'PROD' || 'DEV')] }}
          FRONTEND_ORIGIN: ${{ secrets[format('FE_ORIGIN_{0}', env.CONFIG_ENV == 'prod' && 'PROD' || 'DEV')] }}
          JWT_SECRET: ${{ secrets[format('JWT_SECRET_{0}', env.CONFIG_ENV == 'prod' && 'PROD' || 'DEV')] }}
          MONGO_URL: ${{ secrets[format('MONGO_URL_{0}', env.CONFIG_ENV == 'prod' && 'PROD' || 'DEV')] }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI: ${{ secrets[format('GOOGLE_REDIRECT_URI_{0}', env.CONFIG_ENV == 'prod' && 'PROD' || 'DEV')] }}
        run: |
          set -euo pipefail

          echo "Ensuring artifacts bucket exists: $ARTIFACT_BUCKET (region $AWS_REGION)"
          if ! aws s3api head-bucket --bucket "$ARTIFACT_BUCKET" 2>/dev/null; then
            aws s3api create-bucket --bucket "$ARTIFACT_BUCKET"
            aws s3api put-bucket-versioning --bucket "$ARTIFACT_BUCKET" --versioning-configuration Status=Enabled
          fi

          # Redacted sanity checkâ€”just shows that values are NON-empty (length), not the secrets themselves
          echo "PARAM lengths -> FO:${#FRONTEND_ORIGIN} JWT:${#JWT_SECRET} MONGO:${#MONGO_URL} GID:${#GOOGLE_CLIENT_ID} GSEC:${#GOOGLE_CLIENT_SECRET} GRURI:${#GOOGLE_REDIRECT_URI}"

          echo "Deploying stack: $STACK_NAME"
          sam deploy \
            --debug \
            --template-file template.yaml \
            --stack-name "$STACK_NAME" \
            --s3-bucket "$ARTIFACT_BUCKET" \
            --region "$AWS_REGION" \
            --capabilities CAPABILITY_IAM \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              EnvName="$CONFIG_ENV" \
              FrontendOrigin="$FRONTEND_ORIGIN" \
              JwtSecret="$JWT_SECRET" \
              MongoUrl="$MONGO_URL" \
              GoogleClientId="$GOOGLE_CLIENT_ID" \
              GoogleClientSecret="$GOOGLE_CLIENT_SECRET" \
              GoogleRedirectUri="$GOOGLE_REDIRECT_URI"

          echo "Waiting for stack to exist..."
          aws cloudformation wait stack-exists --region "$AWS_REGION" --stack-name "$STACK_NAME"

          echo "---- ApiBaseUrl ----"
          aws cloudformation describe-stacks \
            --region "$AWS_REGION" \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='ApiBaseUrl'].OutputValue" \
            --output text
