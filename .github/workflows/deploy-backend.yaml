name: Deploy Backend (Lambda)

on:
  push:
    branches: [main, dev]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      CONFIG_ENV: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
      STACK_NAME: med-arb-api-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Who am I / region
        run: |
          aws sts get-caller-identity
          aws configure list

      - name: Install backend deps (include dev)
        working-directory: backend
        env:
          NODE_ENV: "" # ensure not "production"
        run: |
          npm install --include=dev

      - name: Ensure esbuild exists (just in case)
        working-directory: backend
        run: |
          if ! npx --yes esbuild --version >/dev/null 2>&1; then
            echo "esbuild missing; installing locally..."
            npm i -D esbuild
          fi
          npx esbuild --version

      - name: SAM build (try local, then fallback container)
        working-directory: backend
        run: |
          set -e
          if ! sam build --cached; then
            echo "Local build failed; retrying with container..."
            sam build --use-container
          fi

      - name: Determine artifact bucket
        id: bucket
        run: |
          echo "bucket=${{ secrets[format('SAM_ARTIFACT_BUCKET_{0}', env.CONFIG_ENV == 'prod' && 'PROD' || 'DEV')] }}" >> $GITHUB_OUTPUT

      - name: Ensure artifacts bucket exists
        run: |
          set -euo pipefail
          ARTIFACT_BUCKET="${{ steps.bucket.outputs.bucket }}"
          echo "Ensuring artifacts bucket exists: $ARTIFACT_BUCKET (region $AWS_REGION)"
          if ! aws s3api head-bucket --bucket "$ARTIFACT_BUCKET" 2>/dev/null; then
            # us-east-1: no LocationConstraint
            aws s3api create-bucket --bucket "$ARTIFACT_BUCKET"
            aws s3api put-bucket-versioning --bucket "$ARTIFACT_BUCKET" --versioning-configuration Status=Enabled
          fi

      - name: Drop stuck stack if ROLLBACK_COMPLETE
        run: |
          set -euo pipefail
          STATUS=$(aws cloudformation describe-stacks \
            --region "$AWS_REGION" \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NOT_FOUND")
          echo "Current stack status: $STATUS"
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Deleting stack $STACK_NAME to allow clean deploy..."
            aws cloudformation delete-stack --region "$AWS_REGION" --stack-name "$STACK_NAME"
            aws cloudformation wait stack-delete-complete --region "$AWS_REGION" --stack-name "$STACK_NAME"
          fi

      - name: SAM deploy
        working-directory: backend
        env:
          ARTIFACT_BUCKET: ${{ steps.bucket.outputs.bucket }}
          FRONTEND_ORIGIN: ${{ secrets[format('FE_ORIGIN_{0}', env.CONFIG_ENV == 'prod' && 'PROD' || 'DEV')] }}
          JWT_SECRET: ${{ secrets[format('JWT_SECRET_{0}', env.CONFIG_ENV == 'prod' && 'PROD' || 'DEV')] }}
          MONGO_URL: ${{ secrets[format('MONGO_URL_{0}', env.CONFIG_ENV == 'prod' && 'PROD' || 'DEV')] }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI: ${{ secrets[format('GOOGLE_REDIRECT_URI_{0}', env.CONFIG_ENV == 'prod' && 'PROD' || 'DEV')] }}
        run: |
          set -euo pipefail

          echo "PARAM lengths -> FO:${#FRONTEND_ORIGIN} JWT:${#JWT_SECRET} MONGO:${#MONGO_URL} GID:${#GOOGLE_CLIENT_ID} GSEC:${#GOOGLE_CLIENT_SECRET} GRURI:${#GOOGLE_REDIRECT_URI}"

          sam deploy \
            --debug \
            --template-file template.yaml \
            --stack-name "$STACK_NAME" \
            --s3-bucket "$ARTIFACT_BUCKET" \
            --region "$AWS_REGION" \
            --capabilities CAPABILITY_IAM \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              EnvName="$CONFIG_ENV" \
              FrontendOrigin="$FRONTEND_ORIGIN" \
              JwtSecret="$JWT_SECRET" \
              MongoUrl="$MONGO_URL" \
              GoogleClientId="$GOOGLE_CLIENT_ID" \
              GoogleClientSecret="$GOOGLE_CLIENT_SECRET" \
              GoogleRedirectUri="$GOOGLE_REDIRECT_URI"

          echo "Waiting for stack to exist..."
          aws cloudformation wait stack-exists --region "$AWS_REGION" --stack-name "$STACK_NAME"

          echo "---- ApiBaseUrl ----"
          API_BASE=$(aws cloudformation describe-stacks \
            --region "$AWS_REGION" \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='ApiBaseUrl'].OutputValue" \
            --output text)
          echo "$API_BASE"
          echo "api_base_url=$API_BASE" >> $GITHUB_OUTPUT
