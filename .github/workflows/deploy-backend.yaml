name: Deploy Backend (Lambda)

on:
  push:
    branches: [main, dev]

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      CONFIG_ENV: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
      STACK_NAME: med-arb-api-${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2

      # We only need esbuild on PATH for SAM's builder.
      - name: Install esbuild (global)
        run: npm i -g esbuild@0.21

      # IMPORTANT: do NOT run `npm install` in backend. Let SAM handle it.
      - name: Guard against node_modules in repo
        working-directory: backend
        run: |
          if [ -d node_modules ]; then
            echo "ERROR: backend/node_modules exists. Delete it before build."
            exit 1
          fi

      - name: SAM build
        working-directory: backend
        run: sam build --cached

      - name: Show built artifact size (sanity)
        working-directory: backend/.aws-sam/build/ApiFunction
        run: du -sh . && find . -maxdepth 2 -type f | wc -l

      - name: SAM deploy (use the BUILT template)
        working-directory: backend
        env:
          ARTIFACT_BUCKET: ${{ secrets[format('SAM_ARTIFACT_BUCKET_{0}', env.CONFIG_ENV == 'prod' && 'PROD' || 'DEV')] }}
          FRONTEND_ORIGIN: ${{ secrets[format('FE_ORIGIN_{0}', env.CONFIG_ENV == 'prod' && 'PROD' || 'DEV')] }}
          JWT_SECRET: ${{ secrets[format('JWT_SECRET_{0}', env.CONFIG_ENV == 'prod' && 'PROD' || 'DEV')] }}
          MONGO_URL: ${{ secrets[format('MONGO_URL_{0}', env.CONFIG_ENV == 'prod' && 'PROD' || 'DEV')] }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI: ${{ secrets[format('GOOGLE_REDIRECT_URI_{0}', env.CONFIG_ENV == 'prod' && 'PROD' || 'DEV')] }}
        run: |
          set -euo pipefail
          # ensure bucket
          if ! aws s3api head-bucket --bucket "$ARTIFACT_BUCKET" 2>/dev/null; then
            aws s3api create-bucket --bucket "$ARTIFACT_BUCKET"
            aws s3api put-bucket-versioning --bucket "$ARTIFACT_BUCKET" --versioning-configuration Status=Enabled
          fi

          # DEPLOY THE BUILT TEMPLATE
          sam deploy \
            --debug \
            --template-file .aws-sam/build/template.yaml \
            --stack-name "$STACK_NAME" \
            --s3-bucket "$ARTIFACT_BUCKET" \
            --region "$AWS_REGION" \
            --capabilities CAPABILITY_IAM \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              EnvName="$CONFIG_ENV" \
              FrontendOrigin="$FRONTEND_ORIGIN" \
              JwtSecret="$JWT_SECRET" \
              MongoUrl="$MONGO_URL" \
              GoogleClientId="$GOOGLE_CLIENT_ID" \
              GoogleClientSecret="$GOOGLE_CLIENT_SECRET" \
              GoogleRedirectUri="$GOOGLE_REDIRECT_URI"

      - name: Show ApiBaseUrl output
        env:
          STACK_NAME: ${{ env.STACK_NAME }}
        run: |
          aws cloudformation describe-stacks \
            --region "$AWS_REGION" \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='ApiBaseUrl'].OutputValue" \
            --output text
